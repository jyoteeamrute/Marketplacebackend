"""
Django settings for Marketplace project.

Generated by 'django-admin startproject' using Django 4.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$h8r!e#%y&sgn_&261%+33*uxnn35nn)h5f&x1#o(s_qpy2#^x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =True
#ALLOWED_HOSTS = ['*']
#ALLOWED_HOSTS = ["23.23.88.239", "127.0.0.1", "localhost"]
ALLOWED_HOSTS = ['23.23.88.239', 'pythonapi.digiexports.in',"127.0.0.1", "localhost","192.168.0.126"]
# Optional: Set X-Frame-Options header to allow specific origins for embedding your site in frames
#X_FRAME_OPTIONS = 'ALLOWALL'
#X_FRAME_OPTIONS = 'DENY'
CORS_ALLOWED_ORIGINS = [
      "http://23.23.88.239:3000",
      "http://23.23.88.239:3001"]
# Application definition
CSRF_TRUSTED_ORIGINS = [
    "http://23.23.88.239:8001",
    "http://127.0.0.1:8001"
]


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'daphne',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist', 
    'Admin',  
    'UserApp',
    'payment',
    'ProfessionalUser',
    'drf_yasg',
    'corsheaders',
    'channels',
    'storages',
    'ChatApp',
    'django_celery_beat',
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'ProfessionalUser.middleware.TrackVisitsMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this
]

ROOT_URLCONF = 'Marketplace.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Marketplace.wsgi.application'

ASGI_APPLICATION = "Marketplace.asgi.application"

CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'  # Make sure Redis is running
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci",
        },
    }
}

# S3 bucket credentials
# from decouple import config

# AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
# AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
# AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")

# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL = None
# AWS_QUERYSTRING_AUTH = False
# AWS_S3_OBJECT_PARAMETERS = {
#     "CacheControl": "max-age=86400",
# }

# AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
# MEDIA_URL = f"{AWS_S3_CUSTOM_DOMAIN}/"
# Store files in S3
# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
# MEDIA_ROOT = "/media/"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Paris'  # France timezone
USE_TZ = True 

USE_I18N = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = '/static/'

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static'),]
# STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'Marketplace', 'static'), ]

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

AUTH_USER_MODEL = 'Admin.AdminUser'

# CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000']  # Add your domain if needed


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
from datetime import timedelta

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'Marketplace.authentication.CustomJWTAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_JSON_ENCODER_CLASS': 'path.to.SafeJSONEncoder',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=32),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    "TOKEN_USER_CLASS": "Admin.AdminUser",
    'ALGORITHM': 'HS256',
    "USER_ID_CLAIM": "admin_id",
}
# GOOGLE_MAPS_API_KEY="AIzaSyAK6RrRGpdVWsrG9Sg8zBqBU-CHMMMUqlc"

# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ravi.tiwari9603@gmail.com'
EMAIL_HOST_PASSWORD = 'pbmi racr owqh ityf'


GOOGLE_MAPS_API_KEY = "AIzaSyAK6RrRGpdVWsrG9Sg8zBqBU-CHMMMUqlc"

STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET")
STRIPE_SECRET_KEY=config("STRIPE_SECRET_KEY")
STRIPE_PUBLISHABLE_KEY=config("STRIPE_PUBLISHABLE_KEY")

CORS_ALLOW_ALL_ORIGINS = True  
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = ["GET", "POST","PUT","DELETE","PATCH","OPTIONS"]
CORS_ALLOW_HEADERS = ["*"]


SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': "Enter the token as: Bearer <your_token>"
        }
    },
      # Disable default session auth
}


DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB

AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")


AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = False
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
MEDIA_URL = f"{AWS_S3_CUSTOM_DOMAIN}/"



ONESIGNAL_USER_APP_ID = config("ONESIGNAL_USER_APP_ID")
ONESIGNAL_USER_API_KEY = config("ONESIGNAL_USER_API_KEY")

ONESIGNAL_PRO_APP_ID = config("ONESIGNAL_PRO_APP_ID")
ONESIGNAL_PRO_API_KEY = config("ONESIGNAL_PRO_API_KEY")


# AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
# MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"
# Store files in S3
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# MEDIA_ROOT = "/media/"
# https://markerplacemobileapp.s3.us-east-1.amazonaws.com/uploads/1742477730979.jpg

SECRET_ENCRYPTION_KEY = "69lwkHRIAm0eSup04-JDm21KkCSISfQDQR8U0scxaIk="

# Channel Layer for WebSockets using Redis
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],  # Make sure Redis is running
        },
    },
}

# MEDIA_URL = "/media/"
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")

LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)


from logging.handlers import RotatingFileHandler

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#             'datefmt': '%Y-%m-%d %H:%M:%S',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose',
#         },
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(LOG_DIR, 'webhooks.log'),
#             'maxBytes': 5 * 1024 * 1024,
#             'backupCount': 5,
#             'formatter': 'verbose',
#         },
#         'error_file': {
#             'level': 'ERROR',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(LOG_DIR, 'webhooks.log'),
#             'maxBytes': 5 * 1024 * 1024,
#             'backupCount': 5,
#             'formatter': 'verbose',
#         },
#     },
#     'loggers': {
#         # Root logger - catches everything
#         '': {
#             'handlers': ['console', 'file'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#         # Django-specific logs
#         'django': {
#             'handlers': ['console', 'file', 'error_file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         # HTTP request errors
#         'django.request': {
#             'handlers': ['error_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         # Optional custom logger
#         'main': {
#             'handlers': ['console', 'file'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#         # Suppress boto3 debug spam
#         'boto3': {
#             'handlers': ['console', 'file'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#         'botocore': {
#             'handlers': ['console', 'file'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#     }
# }


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'webhooks.log'),
            'maxBytes': 5 * 1024 * 1024,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'webhooks.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # Root logger
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Django internal logging
        'django': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django request errors
        'django.request': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Custom app logging
        'main': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # AWS SDK logging control
        'boto3': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'botocore': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        # Suppress verbose Pillow logs
        'PIL': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'PIL.Image': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'PIL.PngImagePlugin': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        # Daphne server logs
        'daphne': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    }
}
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'check_trial_expiry_every_minute': {
        'task': 'payment.tasks.send_trial_expiry_email',
        'schedule': crontab(),  # every minute
    },
}
